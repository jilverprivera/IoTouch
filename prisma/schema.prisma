generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role {
  ADMIN
  EDITOR
  VIEWER
}

model User {
  id                       String             @id @unique @default(uuid())
  fistName                 String             @map("first_name")
  secondName               String?            @map("second_name")
  firstSurname             String             @map("first_surname")
  secondSurname            String?            @map("second_surname")
  createdAt                DateTime           @default(now()) @map("created_at") @db.Timestamp()
  updatedAt                DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  userIndividual           UserIndividual?
  roommateRequestsSent     RoommateRequests[] @relation("roommateRequestsSent")
  roommateRequestsReceived RoommateRequests[] @relation("roommateRequestsReceived")
  firstRoommate            Roommate[]         @relation("firstRoommate")
  secondRoommate           Roommate[]         @relation("secondRoommate")
  areas                    Area[]
  controllers              Controller[]
  usersInAreas             UsersInAreas[]

  @@index([id])
  @@map("user")
}

model RoommateRequests {
  sender     User     @relation("roommateRequestsSent", fields: [senderId], references: [id])
  senderId   String   @map("sender_id")
  receiver   User     @relation("roommateRequestsReceived", fields: [receiverId], references: [id])
  receiverId String   @map("receiver_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  canceled   Boolean  @default(false)

  @@id([senderId, receiverId])
  @@map("roommate_requests")
}

model Roommate {
  firstRoommate    User     @relation("firstRoommate", fields: [firstRoommateId], references: [id])
  firstRoommateId  String   @map("first_roommate_id")
  secondRoommate   User     @relation("secondRoommate", fields: [secondRoommateId], references: [id])
  secondRoommateId String   @map("secondary_roommate_id")
  deleted          Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()

  @@id([firstRoommateId, secondRoommateId])
  @@map("roommate")
}

model UserIndividual {
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique @map("user_id")
  fullName     String? @map("full_name")
  location     String? /// @encrypted
  locationHash String? @map("location_hash") /// @encryption:hash(location)

  @@id([userId])
  @@index([userId])
  @@map("user_individual")
}

model AreaType {
  id    String @id @unique @default(uuid())
  label String
  icon  String
  color String @default("#F5F5F5")
  areas Area[]

  @@map("area_type")
}

model Area {
  id           String         @id @unique @default(uuid())
  creator      User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String         @map("creator_id")
  areaType     AreaType       @relation(fields: [areaTypeId], references: [id], onDelete: Cascade)
  areaTypeId   String         @map("area_type_id")
  label        String
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  controllers  Controller[]
  usersInAreas UsersInAreas[]

  @@map("area")
}

model UsersInAreas {
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @map("user_id")
  area       Area     @relation(fields: [areaId], references: [id])
  areaId     String   @map("area_id")
  role       role     @default(VIEWER)
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp()

  @@id([userId, areaId])
  @@map("users_in_areas")
}

model ControllerType {
  id          String       @id @unique @default(uuid())
  key         String       @unique
  label       String
  controllers Controller[]

  @@index([key])
  @@map("controller_type")
}

model Controller {
  id               String         @id @unique @default(uuid())
  controllerType   ControllerType @relation(fields: [controllerTypeId], references: [id], onDelete: Cascade)
  controllerTypeId String         @map("controller_type_id")
  creator          User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId        String         @map("creator_id")
  area             Area?          @relation(fields: [areaId], references: [id], onDelete: Cascade)
  areaId           String?        @map("area_id")
  label            String
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  devices          Device[]
  data             Data[]

  @@map("controller")
}

model DeviceType {
  id      String   @id @unique @default(uuid())
  key     String   @unique @default("default")
  label   String
  devices Device[]

  @@index([key])
  @@map("device_type")
}

model Device {
  id           String      @id @unique @default(uuid())
  deviceType   DeviceType  @relation(fields: [deviceTypeId], references: [id], onDelete: Cascade)
  deviceTypeId String      @map("device_type_id")
  controller   Controller? @relation(fields: [controllerId], references: [id], onDelete: Cascade)
  controllerId String?     @map("controller_id")
  label        String
  value        Int?        @default(0)
  active       Boolean     @default(false)
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp()

  @@map("device")
}

model Data {
  id           String      @id @unique @default(uuid())
  controller   Controller? @relation(fields: [controllerId], references: [id])
  controllerId String?     @map("controller_id")
  data         Json
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamp()

  @@index([controllerId])
  @@map("data")
}
